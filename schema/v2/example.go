// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     enum_v2.avsc
 */
package v2

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v8/compiler"
	"github.com/actgardner/gogen-avro/v8/vm"
	"github.com/actgardner/gogen-avro/v8/vm/types"
)

var _ = fmt.Printf

type Example struct {
	Enumfield MyEnum `json:"enumfield"`
}

const ExampleAvroCRC64Fingerprint = "\x92l\x84\x15\xa3\t\xce*"

func NewExample() Example {
	r := Example{}
	return r
}

func DeserializeExample(r io.Reader) (Example, error) {
	t := NewExample()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeExampleFromSchema(r io.Reader, schema string) (Example, error) {
	t := NewExample()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeExample(r Example, w io.Writer) error {
	var err error
	err = writeMyEnum(r.Enumfield, w)
	if err != nil {
		return err
	}
	return err
}

func (r Example) Serialize(w io.Writer) error {
	return writeExample(r, w)
}

func (r Example) Schema() string {
	return "{\"fields\":[{\"name\":\"enumfield\",\"type\":{\"default\":\"ONE\",\"name\":\"myEnum\",\"namespace\":\"enum.v2\",\"symbols\":[\"ONE\",\"TWO\",\"THREE\"],\"type\":\"enum\"}}],\"name\":\"enum.v2.example\",\"type\":\"record\"}"
}

func (r Example) SchemaName() string {
	return "enum.v2.example"
}

func (_ Example) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Example) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Example) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Example) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Example) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Example) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Example) SetString(v string)   { panic("Unsupported operation") }
func (_ Example) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Example) Get(i int) types.Field {
	switch i {
	case 0:
		return &MyEnumWrapper{Target: &r.Enumfield}
	}
	panic("Unknown field index")
}

func (r *Example) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Example) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Example) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Example) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Example) Finalize()                        {}

func (_ Example) AvroCRC64Fingerprint() []byte {
	return []byte(ExampleAvroCRC64Fingerprint)
}

func (r Example) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["enumfield"], err = json.Marshal(r.Enumfield)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Example) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["enumfield"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Enumfield); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for enumfield")
	}
	return nil
}
