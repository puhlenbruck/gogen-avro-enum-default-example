// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     enum_v1.avsc
 */
package v1

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v8/vm"
	"github.com/actgardner/gogen-avro/v8/vm/types"
)

type MyEnum int32

const (
	MyEnumONE MyEnum = 0
	MyEnumTWO MyEnum = 1
)

func (e MyEnum) String() string {
	switch e {
	case MyEnumONE:
		return "ONE"
	case MyEnumTWO:
		return "TWO"
	}
	return "unknown"
}

func writeMyEnum(r MyEnum, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewMyEnumValue(raw string) (r MyEnum, err error) {
	switch raw {
	case "ONE":
		return MyEnumONE, nil
	case "TWO":
		return MyEnumTWO, nil
	}

	return -1, fmt.Errorf("invalid value for MyEnum: '%s'", raw)
}

func (b MyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *MyEnum) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewMyEnumValue(stringVal)
	*b = val
	return err
}

type MyEnumWrapper struct {
	Target *MyEnum
}

func (b *MyEnumWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b *MyEnumWrapper) SetInt(v int32) {
	*(b.Target) = MyEnum(v)
}

func (b *MyEnumWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b *MyEnumWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b *MyEnumWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b *MyEnumWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b *MyEnumWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b *MyEnumWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b *MyEnumWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b *MyEnumWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b *MyEnumWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b *MyEnumWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b *MyEnumWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b *MyEnumWrapper) Finalize() {}
